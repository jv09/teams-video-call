{"version":3,"file":"RegionDiscovery.js","sources":["../../src/authority/RegionDiscovery.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { IMDSBadResponse } from \"../response/IMDSBadResponse\";\nimport { Constants, ResponseCodes } from \"../utils/Constants\";\n\nexport class RegionDiscovery {\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Options for the IMDS endpoint request\n    protected static IMDS_OPTIONS = {headers: {\"Metadata\": \"true\"}};\n\n    constructor(networkInterface: INetworkModule) {\n        this.networkInterface = networkInterface;\n    }\n\n    /**\n     * Detect the region from the application's environment.\n     * \n     * @returns Promise<string | null>\n     */\n    public async detectRegion(environmentRegion: string | undefined): Promise<string | null> {\n        // Initialize auto detected region with the region from the envrionment \n        let autodetectedRegionName = environmentRegion;\n\n        // Call the local IMDS endpoint for applications running in azure vms\n        if (!autodetectedRegionName) {\n            try {\n                const response = await this.getRegionFromIMDS(Constants.IMDS_VERSION);\n                if (response.status === ResponseCodes.httpSuccess) {\n                    autodetectedRegionName = response.body;\n                } \n                \n                if (response.status === ResponseCodes.httpBadRequest) {\n                    const latestIMDSVersion = await this.getCurrentVersion();\n                    if (!latestIMDSVersion) {\n                        return null;\n                    }\n\n                    const response = await this.getRegionFromIMDS(latestIMDSVersion);\n                    if (response.status === ResponseCodes.httpSuccess) {\n                        autodetectedRegionName = response.body;\n                    }\n                } \n            } catch(e) {\n                return null;\n            } \n        }\n\n        return autodetectedRegionName || null;\n    }\n\n    /**\n     * Make the call to the IMDS endpoint\n     * \n     * @param imdsEndpointUrl\n     * @returns Promise<NetworkResponse<string>>\n     */\n    private async getRegionFromIMDS(version: string): Promise<NetworkResponse<string>> {\n        return this.networkInterface.sendGetRequestAsync<string>(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, RegionDiscovery.IMDS_OPTIONS, Constants.IMDS_TIMEOUT);\n    }\n\n    /**\n     * Get the most recent version of the IMDS endpoint available\n     *  \n     * @returns Promise<string | null>\n     */\n    private async getCurrentVersion(): Promise<string | null> {\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<IMDSBadResponse>(`${Constants.IMDS_ENDPOINT}?format=json`, RegionDiscovery.IMDS_OPTIONS);\n\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n                return response.body[\"newest-versions\"][0];\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA;;;;;IAgBI,yBAAY,gBAAgC;QACxC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;KAC5C;;;;;;IAOY,sCAAY,GAAzB,UAA0B,iBAAqC;;;;;;wBAEvD,sBAAsB,GAAG,iBAAiB,CAAC;6BAG3C,CAAC,sBAAsB,EAAvB,wBAAuB;;;;wBAEF,qBAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,YAAY,CAAC,EAAA;;wBAA/D,QAAQ,GAAG,SAAoD;wBACrE,IAAI,QAAQ,CAAC,MAAM,KAAK,aAAa,CAAC,WAAW,EAAE;4BAC/C,sBAAsB,GAAG,QAAQ,CAAC,IAAI,CAAC;yBAC1C;8BAEG,QAAQ,CAAC,MAAM,KAAK,aAAa,CAAC,cAAc,CAAA,EAAhD,wBAAgD;wBACtB,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;wBAAlD,iBAAiB,GAAG,SAA8B;wBACxD,IAAI,CAAC,iBAAiB,EAAE;4BACpB,sBAAO,IAAI,EAAC;yBACf;wBAEgB,qBAAM,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAA;;wBAA1D,aAAW,SAA+C;wBAChE,IAAI,UAAQ,CAAC,MAAM,KAAK,aAAa,CAAC,WAAW,EAAE;4BAC/C,sBAAsB,GAAG,UAAQ,CAAC,IAAI,CAAC;yBAC1C;;;;;wBAGL,sBAAO,IAAI,EAAC;4BAIpB,sBAAO,sBAAsB,IAAI,IAAI,EAAC;;;;KACzC;;;;;;;IAQa,2CAAiB,GAA/B,UAAgC,OAAe;;;gBAC3C,sBAAO,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAY,SAAS,CAAC,aAAa,qBAAgB,OAAO,iBAAc,EAAE,eAAe,CAAC,YAAY,EAAE,SAAS,CAAC,YAAY,CAAC,EAAC;;;KACnL;;;;;;IAOa,2CAAiB,GAA/B;;;;;;;wBAEyB,qBAAM,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAqB,SAAS,CAAC,aAAa,iBAAc,EAAE,eAAe,CAAC,YAAY,CAAC,EAAA;;wBAAnJ,QAAQ,GAAG,SAAwI;;wBAGzJ,IAAI,QAAQ,CAAC,MAAM,KAAK,aAAa,CAAC,cAAc,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;4BACtJ,sBAAO,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAC;yBAC9C;wBAED,sBAAO,IAAI,EAAC;;;wBAEZ,sBAAO,IAAI,EAAC;;;;;KAEnB;;IAtEgB,4BAAY,GAAG,EAAC,OAAO,EAAE,EAAC,UAAU,EAAE,MAAM,EAAC,EAAC,CAAC;IAuEpE,sBAAC;CA3ED;;;;"}